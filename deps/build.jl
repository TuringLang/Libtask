###
### This file is generated by running
### ` julia generate_buildjl.jl L/Libtask/build_tarballs.jl`
### in the Yggdrasil root directory, with 2 updates:
### 1. add prefix tp products, see https://github.com/JuliaPackaging/Yggdrasil#binaryproviderjl,
### 2. products filter
###

using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libtask_v1_0"], :libtask_v1_0),
    LibraryProduct(prefix, ["libtask_v1_1"], :libtask_v1_1),
    LibraryProduct(prefix, ["libtask_v1_2"], :libtask_v1_2),
    LibraryProduct(prefix, ["libtask_v1_3"], :libtask_v1_3),
]

products_tmp = filter(products) do prod
    endswith(prod.libnames[1], "$(VERSION.major)_$(VERSION.minor)")
end
length(products_tmp) == 0 && (products_tmp = [products[end]])
products = products_tmp

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Libtask_jll.jl/releases/download/Libtask-v0.3.1+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Libtask.v0.3.1.aarch64-linux-gnu.tar.gz", "ad342e90969280fcd198993947fb27a052357c278e40645574b93f13b9f49f25"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Libtask.v0.3.1.i686-linux-gnu.tar.gz", "a4061a2098da96cd6c49300b2895a61ce02d822c603ba85995d300149c9cec5e"),
    Windows(:i686) => ("$bin_prefix/Libtask.v0.3.1.i686-w64-mingw32.tar.gz", "e38da986025dac5767da841cc3666973a303061f4b853c0821fc25de4802f674"),
    MacOS(:x86_64) => ("$bin_prefix/Libtask.v0.3.1.x86_64-apple-darwin14.tar.gz", "93bf6be03236252eea33998c5fa4f0a8173d44b20266e8e05473a2ae957eebde"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Libtask.v0.3.1.x86_64-linux-gnu.tar.gz", "349fc5fdd1d1234f1c1467fd655b9a5e18ac926e5b16db4ba7743b75a9540739"),
    Windows(:x86_64) => ("$bin_prefix/Libtask.v0.3.1.x86_64-w64-mingw32.tar.gz", "837410807715caf15b931f04c968a3ca8967bd0d70df888d1ed535a1679030d0"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
