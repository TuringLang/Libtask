using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libtask"], :libtask),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/hessammehr/LibtaskBuilder2/releases/download/1.0.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Libtask.v1.0.0.arm-linux-gnueabihf.tar.gz", "d6fa3bef9e7a46e16eb33ab1a2da7b821220e71d9487445bd5277672dca7c8ba"),
    Linux(:i686, :glibc) => ("$bin_prefix/Libtask.v1.0.0.i686-linux-gnu.tar.gz", "fe48d8ca185b050b2950db3528664f881d94bbca67b9b8c8581ef53d71076db8"),
    Windows(:i686) => ("$bin_prefix/Libtask.v1.0.0.i686-w64-mingw32.tar.gz", "f1f31acf0ebd9b1790faf8591e23fc93e018278b00617f3d911fb7f052b49f7b"),
    MacOS(:x86_64) => ("$bin_prefix/Libtask.v1.0.0.x86_64-apple-darwin14.tar.gz", "d3e12034f4b6d43360fff063c078fefb38a578d21376fe224f9144f0e846a6a5"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Libtask.v1.0.0.x86_64-linux-gnu.tar.gz", "e8d66030db4ed18600dd4406556fd410dcf96bf5219b99031deac98435c31d63"),
    Windows(:x86_64) => ("$bin_prefix/Libtask.v1.0.0.x86_64-w64-mingw32.tar.gz", "040b34223c06b61ff9dfaef6a56fe2a683e3e94f47a98f6e289fbbe1d88c8353"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
